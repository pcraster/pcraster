/*
 * Parser: P a r s e r  S u p p o r t
 *
 * Generated from: calcparser.g
 *
 * Terence Parr, Russell Quong, Will Cohen, and Hank Dietz: 1989-1998
 * Parr Research Corporation
 * with Purdue University Electrical Engineering
 * with AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR19
 */

#define ANTLR_VERSION	13319
#include "pcctscfg.h"
#include "pccts_stdio.h"
//#define ANTLR_SUPPORT_CODE
#include "tokens.h"
#include "Parser.h"

const ANTLRChar *Parser::tokenName(int tok)   { return _token_tbl[tok]; }

const ANTLRChar *Parser::_token_tbl[]={
	/* 00 */	"Invalid",
	/* 01 */	"@",
	/* 02 */	"TOK_DOLLAR",
	/* 03 */	"TOK_EOF",
	/* 04 */	"TOK_INTERFACE",
	/* 05 */	"TOK_BINDING",
	/* 06 */	"TOK_AREAMAP",
	/* 07 */	"TOK_TIMER",
	/* 08 */	"TOK_MODEL",
	/* 09 */	"TOK_REPORT",
	/* 10 */	"TOK_DYNAMIC",
	/* 11 */	"TOK_INITIAL",
	/* 12 */	"TOK_FILEOUTPUT",
	/* 13 */	"TOK_OBJECT",
	/* 14 */	"TOK_FOREACH",
	/* 15 */	"TOK_REPEAT",
	/* 16 */	"TOK_UNTIL",
	/* 17 */	"TOK_IF",
	/* 18 */	"TOK_IN",
	/* 19 */	"TOK_EXCEPT",
	/* 20 */	"TOK_AND",
	/* 21 */	"TOK_OR",
	/* 22 */	"TOK_ELSE",
	/* 23 */	"TOK_THEN",
	/* 24 */	"TOK_COMMA",
	/* 25 */	"THEN_GROUP",
	/* 26 */	"ELSE_GROUP",
	/* 27 */	"TOK_COMP",
	/* 28 */	"TOK_ASSOP",
	/* 29 */	"TOK_MOMENT_RANGE",
	/* 30 */	"TOK_ENDTIME",
	/* 31 */	"TOK_INT",
	/* 32 */	"TOK_FLOAT",
	/* 33 */	"TOK_FDIV",
	/* 34 */	"TOK_IDIV",
	/* 35 */	"TOK_MOD",
	/* 36 */	"TOK_EQ",
	/* 37 */	"TOK_GE",
	/* 38 */	"TOK_GT",
	/* 39 */	"TOK_ID",
	/* 40 */	"TOK_LE",
	/* 41 */	"TOK_LT",
	/* 42 */	"TOK_NE",
	/* 43 */	"TOK_NOT",
	/* 44 */	"TOK_XOR",
	/* 45 */	"TOK_LP",
	/* 46 */	"TOK_RP",
	/* 47 */	"TOK_LB",
	/* 48 */	"TOK_RB",
	/* 49 */	"TOK_LC",
	/* 50 */	"TOK_RC",
	/* 51 */	"TOK_STAR",
	/* 52 */	"TOK_PLUS",
	/* 53 */	"TOK_MINUS",
	/* 54 */	"TOK_IS",
	/* 55 */	"TOK_SC",
	/* 56 */	"TOK_COL",
	/* 57 */	"TOK_COLON",
	/* 58 */	"TOK_ILLEGAL",
	/* 59 */	"TOK_ILLEGALID",
	/* 60 */	"TOK_CONV_F",
	/* 61 */	"TOK_POW",
	/* 62 */	"ADD_GROUP",
	/* 63 */	"MULT_GROUP",
	/* 64 */	"ID_GROUP",
	/* 65 */	"TOK_REFERENCE",
	/* 66 */	"TOK_2COL"
};

Parser::Parser(ANTLRTokenBuffer *input) : ANTLRParser(input,2,0,0,12)
{
	token_tbl = _token_tbl;
	traceOptionValueDefault=0;		// MR10 turn trace OFF
}

SetWordType Parser::setwd1[67] = {0x0,0x5,0x0,0x60,0x0,0x0,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0xea,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,
	0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0xea,0x0};
SetWordType Parser::setwd2[67] = {0x0,0x0,0x0,0xda,0x0,0x8,0x8,
	0x18,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,
	0xd8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x25,0x25,0x0,0x0,0x0,0x0,0x0,0x0,
	0xfe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x25,0x25,0x0,
	0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0xfe,0x0};
SetWordType Parser::setwd3[67] = {0x0,0x1,0x0,0x7,0x0,0x0,0x0,
	0x0,0x4,0x5,0x5,0x4,0x5,0x5,0x5,
	0x5,0x0,0x1,0x0,0x80,0x0,0x0,0x0,
	0x0,0x31,0x0,0x0,0x0,0x1,0x50,0x0,
	0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,
	0x5,0x0,0x0,0x0,0x1,0x0,0x1,0x38,
	0x1,0x0,0x81,0x0,0x0,0x1,0x1,0x1,
	0x38,0x0,0x0,0x0,0x0,0x1,0x0,0x0,
	0x0,0x0,0x5,0x0};
SetWordType Parser::setwd4[67] = {0x0,0x0,0x0,0xc4,0x0,0x0,0x0,
	0x0,0x0,0xdb,0xc4,0x0,0xcb,0xc3,0xc1,
	0xc1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,
	0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0xdb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0xc4,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0xdb,0x0};
SetWordType Parser::setwd5[67] = {0x0,0x40,0x0,0xbb,0x0,0x0,0x0,
	0x0,0x0,0x21,0x21,0x0,0x21,0x21,0x21,
	0x21,0x0,0xc,0x0,0x0,0x8,0x8,0x80,
	0x80,0x80,0x0,0x0,0x8,0x0,0x0,0x0,
	0xc,0xc,0x8,0x8,0x8,0x8,0x0,0x0,
	0x2d,0x0,0x0,0x0,0xc,0x8,0xc,0x80,
	0x8,0x0,0x0,0x21,0x8,0xc,0xc,0x0,
	0x9a,0x0,0x0,0x0,0x0,0xc,0x8,0x0,
	0x0,0x0,0x2d,0x8};
SetWordType Parser::ADD_GROUP_set[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x30,0x0};
SetWordType Parser::MULT_GROUP_set[12] = {0x0,0x0,0x0,0x0, 0xe,0x0,0x8,0x0};
SetWordType Parser::setwd6[67] = {0x0,0x0,0x0,0xaf,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0xac,0xaf,0xaf,
	0xaf,0xaf,0x0,0x0,0xa0,0x0,0x0,0x0,
	0x0,0x0,0x40,0x40,0x40,0xa8,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0xae,0x0,0xaf,
	0x0,0x0,0x0,0x0,0x40,0x90,0x90,0x0,
	0xaf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0};
SetWordType Parser::THEN_GROUP_set[12] = {0x0,0x0,0x80,0x1};
SetWordType Parser::ELSE_GROUP_set[12] = {0x0,0x0,0x40,0x1};
SetWordType Parser::setwd7[67] = {0x0,0x0,0x0,0x19,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x4,0x0,0x0,0x19,0x19,0x39,
	0x19,0x39,0x0,0x0,0x19,0x0,0x0,0x0,
	0xc4,0xc4,0x19,0x19,0x19,0x19,0x0,0x0,
	0x4,0x0,0x0,0x0,0x4,0x19,0x4,0x99,
	0x0,0x0,0x0,0x0,0x19,0x5f,0x5f,0x0,
	0x19,0x0,0x0,0x0,0x0,0x4,0x18,0x0,
	0x0,0x0,0x4,0x0};
SetWordType Parser::setwd8[67] = {0x0,0x0,0x0,0x30,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0xcb,0x0,0x0,0x32,0x32,0x30,
	0x30,0x70,0x0,0x0,0x32,0x0,0x0,0x0,
	0xcf,0xcf,0x32,0x32,0x32,0x32,0x0,0x0,
	0xcb,0x0,0x0,0x0,0xcb,0x32,0xcb,0x72,
	0x12,0x0,0x0,0x0,0x32,0xff,0xff,0x0,
	0x30,0x0,0x0,0x0,0x0,0xcb,0x32,0x0,
	0x0,0x0,0xcb,0x2};
SetWordType Parser::setwd9[67] = {0x0,0x0,0x0,0xd9,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0xc9,0xc9,0xc9,
	0xc9,0xcd,0x0,0x0,0xc9,0xc,0x0,0x0,
	0xd0,0xd0,0xc9,0xc9,0xc9,0xc9,0x0,0x0,
	0xd0,0x0,0x0,0x0,0x0,0xc9,0x10,0xcb,
	0x8,0x0,0x0,0x0,0xc9,0xf9,0xf9,0xc,
	0xd9,0x0,0x0,0x0,0x0,0x0,0xc9,0x0,
	0x0,0x0,0xd0,0x0};
SetWordType Parser::setwd10[67] = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x1b,0x1b,0x0,0x0,0x0,0x0,0x0,0x0,
	0x2c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x1a,0x1a,0x0,
	0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x2c,0x0};
SetWordType Parser::ID_GROUP_set[12] = {0x0,0x0,0x0,0x0, 0x80,0x0,0x0,0x0, 0x2,0x0,0x0,0x0
	};
