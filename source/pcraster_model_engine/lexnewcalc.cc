
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer gramFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <cerrno>
#include <cstdlib>
#include <cstring>
#include <iostream> 
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *gramalloc (yy_size_t  );
void *gramrealloc (void *,yy_size_t  );
void gramfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int calc::LexGrammar::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 45
#define YY_END_OF_BUFFER 46
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[130] =
    {   0,
       46,   44,   45,   41,   44,   45,   41,   45,   43,   44,
       45,   18,   44,   45,   44,   45,   42,   44,   45,   44,
       45,   44,   45,    2,   44,   45,    3,   44,   45,    8,
       44,   45,    9,   44,   45,   13,   44,   45,   10,   44,
       45,   44,   45,   19,   44,   45,   35,   44,   45,16420,
       44,   45,   12,   44,   45,   23,   44,   45,   11,   44,
       45,   22,   44,   45,   33,   44,   45,    4,   44,   45,
       44,   45,    5,   44,   45,    6,   44,   45,   44,   45,
        7,   44,   45,   24,    1,   16,   15,   26,   28,   29,
       38,   27,   39,   35,16420,   40,   40,   14,   21,   25,

       20,   33,   33,   17,   34,   30,   32, 8228,   38,   39,
       40,   37,   40,   33,   40,   38,   39,   40,   37,   33,
       40,   38,   38,   39,   39,   40,   38,   39,   31
    } ;

static yyconst flex_int16_t yy_accept[98] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       20,   22,   24,   27,   30,   33,   36,   39,   42,   44,
       47,   51,   53,   56,   59,   62,   65,   68,   71,   73,
       76,   79,   81,   84,   85,   85,   86,   87,   88,   89,
       90,   91,   91,   92,   92,   92,   93,   94,   96,   97,
       98,   98,   99,  100,  101,  102,  103,  103,  104,  105,
      106,  107,  108,  108,  108,  109,  111,  111,  111,  112,
      112,  112,  114,  116,  116,  116,  117,  117,  117,  118,
      118,  119,  119,  120,  122,  122,  123,  123,  125,  126,
      127,  127,  129,  129,  129,  130,  130

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   24,   24,   24,   25,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       26,   27,   28,    1,   24,    1,   24,   24,   24,   29,

       30,   24,   24,   24,   31,   24,   24,   24,   32,   33,
       24,   24,   24,   24,   24,   34,   24,   24,   24,   24,
       24,   24,   35,   36,   37,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[38] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    3,    4,    1,
        1,    1,    1,    3,    3,    1,    3,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[107] =
    {   0,
        0,    0,  181,  182,  182,  182,  182,  158,    0,  182,
      161,  169,  182,  182,   26,  155,  182,  154,   23,  153,
       35,  155,  182,  151,  150,  149,   25,  182,   27,  182,
      182,  134,  182,  182,  163,  150,  182,  145,  182,  182,
      182,   28,   31,  139,   54,  182,   66,    0,   44,   60,
       58,  182,  182,  182,  182,   61,    0,   67,  182,  182,
      182,  135,   50,   88,   86,   89,    0,   94,   91,  104,
      146,  105,  136,   13,  144,   90,  112,  143,  142,  132,
      131,  110,  139,  129,  102,  137,  136,  135,  134,  124,
      107,  132,  108,   62,  122,  182,  140,  139,  142,  136,

      144,  130,  118,  110,   54,   44
    } ;

static yyconst flex_int16_t yy_def[107] =
    {   0,
       96,    1,   96,   96,   96,   96,   96,   96,   97,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   98,   96,
       96,   96,   96,   96,   96,   96,   99,   96,  100,   96,
       96,   96,   96,   96,   97,   96,   96,   96,   96,   96,
       96,   98,   42,   98,  100,   96,   96,   21,  101,  101,
      102,   96,   96,   96,   96,   99,   45,   99,   96,   96,
       96,   42,   98,   98,   47,   47,   65,   65,  101,  103,
       96,  101,  104,   98,   96,   98,   65,   96,   65,  105,
      106,  103,   96,  104,   98,   96,   96,   65,   96,  106,
       98,   96,   98,   98,   98,    0,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96
    } ;

static yyconst flex_int16_t yy_nxt[220] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   29,   30,   27,   27,
       27,   27,   27,   27,   31,   32,   33,   38,   42,   45,
       43,   85,   44,   57,   44,   62,   90,   39,   43,   45,
       47,   45,   48,   45,   45,   64,   80,   63,   49,   50,
       64,   51,   70,   49,   50,   49,   49,   49,   49,   44,
       51,   44,   71,   67,   71,   67,   45,   72,   70,   96,
       45,   65,   74,   66,   51,   96,   51,   45,   45,   67,
       68,   95,   51,   45,   67,   68,   67,   67,   67,   67,

       75,   67,   75,   67,   67,   76,   78,   76,   78,   96,
       67,   79,   84,   77,   45,   67,   45,   51,   77,   80,
       81,   80,   72,   96,   87,   80,   87,   80,   45,   88,
       82,   51,   73,   45,   45,   91,   82,   93,   58,   94,
       35,   44,   35,   35,   56,   56,   69,   69,   45,   92,
       82,   89,   88,   92,   86,   51,   83,   82,   82,   79,
       89,   86,   51,   83,   44,   45,   61,   36,   60,   59,
       55,   54,   53,   52,   46,   41,   40,   37,   36,   34,
       96,    3,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96
    } ;

static yyconst flex_int16_t yy_chk[220] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   15,   19,   74,
       19,   74,   29,   27,   29,   42,  106,   15,   43,   19,
       21,   27,   21,   29,   42,   43,  105,   42,   21,   21,
       43,   21,   49,   21,   21,   21,   21,   21,   21,   45,
       49,   45,   50,   51,   50,   51,   63,   50,   50,   56,
       45,   47,   63,   47,   51,   58,   50,   56,   94,   47,
       47,   94,   47,   58,   47,   47,   47,   47,   47,   47,

       64,   65,   64,   65,   66,   64,   68,   76,   68,   69,
       65,   68,  104,   66,   64,   65,   76,   69,   66,   70,
      103,   70,   72,   72,   77,   82,   77,   82,   85,   77,
       70,   72,  102,   91,   93,   85,   82,   91,  100,   93,
       97,   98,   97,   97,   99,   99,  101,  101,   95,   92,
       90,   89,   88,   87,   86,   84,   83,   81,   80,   79,
       78,   75,   73,   71,   62,   44,   38,   36,   35,   32,
       26,   25,   24,   22,   20,   18,   16,   12,   11,    8,
        3,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "newcalc.l"
#line 2 "newcalc.l"
#include "stddefx.h"

#include <cstring>

#ifndef INCLUDED_IOSTREAM
#include <iostream>
#define INCLUDED_IOSTREAM
#endif
using std::cerr;
using std::cin;
using std::cout;


#ifndef INCLUDED_MEMORY
#include <memory>
#define INCLUDED_MEMORY
#endif

#ifndef INCLUDED_LEXGRAMMAR
  // do not include renamed xxFlexLexer itself!
# define INCLUDED_FLEXLEXER
# include "lexgrammar.h"
# define INCLUDED_LEXGRAMMAR
#endif

#ifndef INCLUDED_PCRDATATYPE
#include "pcrdatatype.h"
#define INCLUDED_PCRDATATYPE
#endif

#ifndef INCLUDED_MAJOR_OP
#include "major_op.h"
#define INCLUDED_MAJOR_OP
#endif

#ifndef INCLUDED_MISC
#include "misc.h"
#define INCLUDED_MISC
#endif

#ifndef INCLUDED_APP
#include "app.h" // AppParseShellLine()
#define INCLUDED_APP
#endif

#ifndef INCLUDED_CALC_GLOBALLIBDEFS
#include "calc_globallibdefs.h"
#define INCLUDED_CALC_GLOBALLIBDEFS
#endif

#ifndef INCLUDED_CALC_POSITION
#include "calc_position.h"
#define INCLUDED_CALC_POSITION
#endif
#ifndef INCLUDED_CCTYPE
#include <cctype>
#define INCLUDED_CCTYPE
#endif

#include "tokens.h"
#undef  YY_DECL
#define YY_DECL ANTLRAbstractToken *calc::LexGrammar::getToken()


#define RETURN_TOK(token)              { return createToken(token);                  }
#define RETURN_OP(operator,groupName)  { return createToken(groupName,operator);     }
#define RETURN_INT(intValue,token)     { return createValue(token,intValue);         }
#define RETURN_FLOAT                   { return createValue(TOK_FLOAT,atof(yytext)); }

/* letters and the underscore */
/*****************************
N U    dospath  [\$\%\'\`\@\{\}\~\#\&\\\.\:]
O S    doschar {letter}|{digit}|{dospath}
T E    filename  ({doschar})*
  D
*******************************/
/* white space */
/*
 * id    ({letter}|[\.\\])({letter}|{digit}|[\.\\])*
 *                       * letter followed by 0 or more
 *                        * letter digits or points OR the DOS
 *                        * directory splitter!
 */
/* letter digit or point
*/
/* a quote followed by 1 or more characters
and ended by a quote */
/* expontential part of float */
/* NB in next section:
 * C-code must start on same line as pattern
 * [\(\)\*\+\-\=\;\,\:\[\]\{\}] { RETURN_TOK(yytext[0]); }
 */
#line 618 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state = 0;
	char *yy_cp = nullptr, *yy_bp = nullptr;
	int yy_act = 0;
    
#line 116 "newcalc.l"



#line 722 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)gramalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( true )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 97 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 182 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 119 "newcalc.l"
{ RETURN_TOK(TOK_DOLLAR); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 120 "newcalc.l"
{ RETURN_TOK(TOK_LP); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "newcalc.l"
{ RETURN_TOK(TOK_RP); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "newcalc.l"
{ RETURN_TOK(TOK_LB); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "newcalc.l"
{ RETURN_TOK(TOK_RB); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 124 "newcalc.l"
{ RETURN_TOK(TOK_LC); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 125 "newcalc.l"
{ RETURN_TOK(TOK_RC); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "newcalc.l"
{ RETURN_OP(OP_MUL, TOK_STAR); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 127 "newcalc.l"
{ RETURN_TOK(TOK_PLUS); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 128 "newcalc.l"
{ RETURN_TOK(TOK_MINUS); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 129 "newcalc.l"
{ RETURN_TOK(TOK_IS); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 130 "newcalc.l"
{ RETURN_TOK(TOK_SC); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 131 "newcalc.l"
{ RETURN_TOK(TOK_COMMA); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 132 "newcalc.l"
{ RETURN_TOK(TOK_2COL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "newcalc.l"
{RETURN_TOK(TOK_POW); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 134 "newcalc.l"
{RETURN_TOK(TOK_AND); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "newcalc.l"
{RETURN_TOK(TOK_OR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 136 "newcalc.l"
{ RETURN_OP(OP_NOT_, TOK_NOT);   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 137 "newcalc.l"
{ RETURN_OP(OP_FDIV,TOK_FDIV); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 138 "newcalc.l"
{ RETURN_OP(OP_GE,  TOK_COMP); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 139 "newcalc.l"
{ RETURN_OP(OP_LE,  TOK_COMP); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 140 "newcalc.l"
{ RETURN_OP(OP_GT,  TOK_COMP); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 141 "newcalc.l"
{ RETURN_OP(OP_LT,  TOK_COMP); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 142 "newcalc.l"
{ RETURN_OP(OP_NE,  TOK_EQ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 143 "newcalc.l"
{ RETURN_OP(OP_EQ,  TOK_EQ); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 144 "newcalc.l"
{ RETURN_OP(OP_MUL, TOK_ASSOP); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 145 "newcalc.l"
{ RETURN_OP(OP_FDIV,TOK_ASSOP); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 146 "newcalc.l"
{ RETURN_OP(OP_BADD,TOK_ASSOP); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 147 "newcalc.l"
{ RETURN_OP(OP_BMIN,TOK_ASSOP); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 148 "newcalc.l"
{ RETURN_OP(OP_POW, TOK_ASSOP); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 150 "newcalc.l"
{ RETURN_INT(-1,TOK_MOMENT_RANGE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 151 "newcalc.l"
{ RETURN_INT((atoi((char *)yytext+2)),TOK_MOMENT_RANGE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "newcalc.l"
{ return idOrKeyWord(); }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 154 "newcalc.l"
{ return reference(); }
	YY_BREAK
case 35:
#line 157 "newcalc.l"
case 36:
YY_RULE_SETUP
#line 157 "newcalc.l"
{ long value = 0; /* right context .. (O'reilly p. 152) is used to get
                               * an integer definition for before the TOK_MOMENT_RANGE
                               * otherwise this lexer see 2. first as a TOK_FLOAT
                               * and trashes on the next point
                               */

                  value = atol((char *)yytext);
                  if (value < (long)INT_MIN || value > (long)INT_MAX)
                     RETURN_FLOAT;
                  RETURN_INT(atoi((char *)yytext),TOK_INT);
               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 170 "newcalc.l"
{ RETURN_FLOAT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 171 "newcalc.l"
{ RETURN_FLOAT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 172 "newcalc.l"
{ RETURN_FLOAT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 174 "newcalc.l"
{ // pcrcalc/test343
                 // a common error starting an id with a number
                 // in lex-rules AFTER float, otherwise 1e32 will match here
                  RETURN_TOK(TOK_ILLEGALID);
               }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 180 "newcalc.l"
{ // skip whitespace
                   d_input.incrCharNr(strlen(yytext));
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 183 "newcalc.l"
{ parseComment(); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 184 "newcalc.l"
{
                  d_eofParsed = true;
                  RETURN_TOK(TOK_EOF); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 187 "newcalc.l"
{   // skip DOS EOF char
                     yyinput();
                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 190 "newcalc.l"
{ // pcrcalc/test318
                  RETURN_TOK(TOK_ILLEGAL);
                }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "newcalc.l"
ECHO;
	YY_BREAK
#line 1082 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state = 0;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = nullptr;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = nullptr;

    (yy_buffer_stack) = nullptr;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move = 0, i = 0;
	int ret_val = 0;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state = 0;
	char *yy_cp = nullptr;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 97 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam = 0;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 97 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 96);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp = nullptr;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c = 0;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b = nullptr;
    
	b = (YY_BUFFER_STATE) gramalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gramalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) nullptr;

	if ( b->yy_is_our_buffer )
		gramfree((void *) b->yy_ch_buf  );

	gramfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == nullptr)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state ()
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = nullptr;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack()
{
	int num_to_alloc = 0;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gramalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gramrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size = 0;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) gramalloc(new_size  );

		else
			(yy_start_stack) = (int *) gramrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = nullptr;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	gramfree((yy_buffer_stack) );
	(yy_buffer_stack) = nullptr;

	delete [] (yy_state_buf);
	gramfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gramalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gramrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gramfree (void * ptr )
{
	free( (char *) ptr );	/* see gramrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 194 "newcalc.l"



calc::LexGrammar::LexGrammar(LexInput& input):
  d_input(input),
  d_eofParsed(false)
{
}

typedef struct KWORD
{
  const  char  *name;
    ANTLRTokenType  token;
    MAJOR_CODE  op;
} KWORD;

static const KWORD keywordTable[] = /* must be sorted */
{
  { "and"    , TOK_AND  , OP_NOP},
  { "areamap"  , TOK_AREAMAP  , OP_NOP},
  { "binding"  , TOK_BINDING  , OP_NOP},
  { "boolean"  , TOK_CONV_F  , OP_BOOLEAN_},
  { "directional"  , TOK_CONV_F  , OP_DIRECTIONAL},
  { "div"    , TOK_FDIV   , OP_FDIV},
  { "dynamic"  , TOK_DYNAMIC  , OP_NOP},
  { "else"  , TOK_ELSE  , OP_NOP},
  { "endtime"     , TOK_ENDTIME   , OP_NOP},
  { "eq"    , TOK_EQ  , OP_EQ},
  { "except"      , TOK_EXCEPT     , OP_NOP},
  { "fileoutput"  , TOK_FILEOUTPUT, OP_NOP},
  { "foreach"     , TOK_FOREACH   , OP_NOP},
  { "ge"    , TOK_COMP  , OP_GE},
  { "gt"    , TOK_COMP  , OP_GT},
  { "idiv"  , TOK_IDIV   , OP_IDIV},
  { "if"    , TOK_IF  , OP_NOP},
  { "in"    , TOK_IN  , OP_NOP},
  { "initial"   , TOK_INITIAL , OP_NOP},
  { "interface" , TOK_INTERFACE, OP_NOP},
  { "ldd"       , TOK_CONV_F  , OP_LDD},
  { "le"        , TOK_COMP    , OP_LE},
  { "lt"        , TOK_COMP    , OP_LT},
  { "mif"       , TOK_IF      , OP_NOP},
  { "mod"       , TOK_MOD     , OP_MOD},
  { "model"     , TOK_MODEL   , OP_NOP},
  { "ne"        , TOK_EQ      , OP_NE},
  { "nominal"   , TOK_CONV_F  , OP_NOMINAL},
  { "not"       , TOK_NOT     , OP_NOT_},
  { "object"    , TOK_OBJECT  , OP_NOP},
  { "or"        , TOK_OR      , OP_NOP},
  { "ordinal"   , TOK_CONV_F  , OP_ORDINAL},
  { "repeat"    , TOK_REPEAT  , OP_NOP},
  { "report"    , TOK_REPORT  , OP_NOP},
  { "scalar"    , TOK_CONV_F  , OP_SCALAR},
  { "then"      , TOK_THEN    , OP_NOP},
  { "timer"     , TOK_TIMER   , OP_NOP},
  { "until"     , TOK_UNTIL   , OP_NOP},
  { "xor"       , TOK_XOR     , OP_NOP}
};
#define NR_KWORDS  (ARRAY_SIZE(keywordTable))

static int cmp(const void *a, const void *b)
{
  return(strcmp(((const KWORD *)a)->name, ((const KWORD *)b)->name));
}

#ifdef DEBUG
void calc::LexGrammar::checkSortedTable()
/* verify if keywordTable is sorted correctly */
{
  static BOOL checked = FALSE;
  KWORD  table[NR_KWORDS];
  size_t i;

  if (! checked)
  {
    memcpy(table, keywordTable, sizeof(keywordTable));
    qsort(table, NR_KWORDS, sizeof(KWORD), cmp);
    for(i=0; i < NR_KWORDS; i++)
      POSTCOND(! cmp(table+i, keywordTable+i));
    checked = TRUE;
  }
}
#endif /* DEBUG */

/* Determine if something is a keyword or an id
 * PATH_SEPERATORS are in-situ changed to platform specifics
 * returns TOK_ID if it's an id or the appropriate
 * constant for the keyword (e.g. TOK_AND)
 */
ANTLRAbstractToken *calc::LexGrammar::idOrKeyWord()
{
  KWORD *p = nullptr, dummy;

  IFDEBUG(checkSortedTable());

  dummy.name = yytext;
  p = static_cast<KWORD *>
     (bsearch((const void *)&dummy, (const void *)keywordTable,
      NR_KWORDS, sizeof(KWORD), cmp));

  if(p) {
    LexToken *lt=createToken(p->token,p->op);
    lt->setIsKeyword(true);
    return lt;
  }

  ReplaceDirPathDelimChar(yytext);
  RETURN_TOK(TOK_ID);
}

/*! parse id in a quoted reference, allowing path names etcetera
 * PATH_SEPERATORS are in-situ changed to platform specifics
 */
ANTLRAbstractToken *calc::LexGrammar::reference()
{
  // nr of chars in quoted string (minus 2 " )
  int i = 0,n = strlen(yytext)-2;
  PRECOND(n >= 0); /* non-empty string plus end " */

  // remove "
  for(i=0; i<n ; i++)
    yytext[i] = yytext[i+1];
  yytext[i] = '\0';

  // replace PATH_SEPERATORS
  ReplaceDirPathDelimChar(yytext);

  // obsolete: now a number in quotes is a filename
  // if (com::isDouble(yytext)) {
  //   std::auto_ptr<Position> pos(d_input.createPosition());
  //   pos->throwError("filename can not be a numeric value");
  // }

  return createToken(TOK_REFERENCE,OP_NOP,2);
}

//! parse a comment
/*!
   if first comment with #! then process and/or store \a d_optionLine
 */
void calc::LexGrammar::parseComment()
{
  // save current position
  std::unique_ptr<Position> pos(d_input.createPosition());

  int c = yyinput();
  // if first time encountered
  if (c == '!' && d_optionLine.empty()) {
    // argscalc/test21b is empty line test
    // the starting #! for options
    while (c != EOF) {
      c = yyinput();
      if (c == EOF || c == '\n') {
         if (AppParseShellLine(d_optionLine.c_str())) {
           // argscalc/test21a
           pos->throwError(getLibError());
         }
         // add a space so it is never empty
         d_optionLine+=" ";
         return;
      }
      d_optionLine+=static_cast<char>(c);
    }
    POSTCOND(FALSE); // never reached
  }
  while (c != EOF && c != '\n')
    c = yyinput();
}

//! return parsed #! option, empty if none
const std::string& calc::LexGrammar::optionLine() const
{
    return d_optionLine;
}

//! attach calc::LexInput as input
int calc::LexGrammar::LexerInput(char *buf, int /* max_size */)
{
  int c = d_input.getChar();
  return (c == EOF) ? 0 : (buf[0] = c, 1);
}

calc::LexToken* calc::LexGrammar::createToken(
    ANTLRTokenType type,
    MAJOR_CODE op,
    size_t snoopedChars)
{
  // now snapshot where the token starts
  // befor updating new position
  Position* p=d_input.createPosition();
  // update new position
  d_input.incrCharNr(strlen(yytext)+snoopedChars);

  return new calc::LexToken(type, op, yytext, p);
}

calc::LexToken::LexToken(
  ANTLRTokenType type, MAJOR_CODE op, const char* text,
  Position *ownedPos):
    d_type(type), d_isKeyword(false),d_op(op),d_text(text), d_pos(ownedPos)
{
  try {
   switch(d_type) {
     case TOK_ILLEGALID:
       // pcrcalc/test343
       d_pos->throwError("Illegal combination of number and name: "+quote(d_text));
     case TOK_ILLEGAL:
       char aBuf[64];
       if (std::isprint(d_text[0])) {
         // pcrcalc/test318
         // argscalc/test41a
         // argscalc/test40
         d_pos->throwError("Unknown character(s) "+quote(d_text));
       }
       // pcrcalc/test375
       std::snprintf(aBuf,64,"not printable: %X(hex)",d_text[0]);
       d_pos->throwError(aBuf);
     default:;
   }
  } catch(...) {
     delete d_pos;
     throw;
  }
}

void calc::LexToken::setIsKeyword(bool isKeyword) {
    d_isKeyword=isKeyword;
}

bool calc::LexToken::isKeyword() const {
    return d_isKeyword;
}

calc::LexToken *calc::LexGrammar::createValue(ANTLRTokenType type, double nrValue)
{
  calc::LexToken *t = createToken(type);
  t->setNrValue(nrValue);
  return t;
}

calc::LexToken::~LexToken()
{
  delete d_pos;
}

//!
/*!
   \todo  make \a d_val and \a val integers
 */
void calc::LexToken::setNrValue(double val) {
    d_val=val;
}

ANTLRTokenType calc::LexToken::getType() const
{
 return d_type;
}

ANTLRChar     *calc::LexToken::getText() const
{
 // Brutal cast, Ok
 return (ANTLRChar *)d_text.c_str();
}

const std::string& calc::LexToken::stringVal()  const
{ return d_text;  
}

MAJOR_CODE calc::LexToken::opCode() const
{
  return d_op;
}

int calc::LexToken::integerVal() const
{
  return static_cast<int>(d_val);
}

const calc::Position *calc::LexToken::position() const
{
  return d_pos;
}

//! only needed by ANTLR to link
void calc::LexToken::setType(ANTLRTokenType /* t */) {
   PRECOND(FALSE); // Bollocks
}

//! only needed by ANTLR to link
void calc::LexToken::setText(const ANTLRChar * /* s */) {
    PRECOND(FALSE);// Bollocks
}

//! only needed by ANTLR to link
void calc::LexToken::setLine(int /* line */) {
    PRECOND(FALSE);// Bollocks
}
int calc::LexToken::getLine()const {
    PRECOND(FALSE);// Bollocks
    return 0;
}

