import os
import pathlib
import platform
import shutil
import sys


# On Windows prepend the path to our dlls to the PATH environment variable.
# Otherwise our dlls won't be found when our Python extensions are loaded
# by Python.
if sys.platform == "win32":
    pcraster_app_path = shutil.which("pcrcalc.exe")
    if pcraster_app_path:
        pcraster_bin_pathname = pathlib.Path(pcraster_app_path).parent.absolute()
        os.add_dll_directory(pcraster_bin_pathname)


# Check if we can import our compiled module
try:
    from ._pcraster import *
except ImportError as error:
    # Test matching Python versions
    major, minor, patchlevel = platform.python_version_tuple()
    python_version = (int(major), int(minor))
    build_version = (${Python_VERSION_MAJOR}, ${Python_VERSION_MINOR})

    # Major and minor should match
    if build_version != python_version:
        msg = f"The 'pcraster' module was built for Python ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}, the version used is {major}.{minor}"
        error.add_note(f"\n{msg}\n")
        raise

    # Test matching bitness
    nr_bits = 64 if sys.maxsize > 2**32 else 32

    if nr_bits != ${NR_BITS}:
        msg = f"The 'pcraster' module was built for ${NR_BITS}-bit, the Python version used is {nr_bits}-bit"
        error.add_note(f"\n{msg}\n")
        raise

    msg = ""

    # VS2017 and runtime components related issues
    if sys.platform == "win32":
        msg += "The 'Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017, 2019, and 2022' is required to run PCRaster, available at:\n"
        msg += "https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022\n"

    # Something else went wrong...
    msg += "In case you cannot solve the issue please consult the PCRaster mailing list at:\nhttps://lists.geo.uu.nl/mailman/listinfo/pcraster-info"
    error.add_note(f"\n{msg}\n")
    raise
except Exception as error:
    raise error


# If importing the compiled module succeeds everything else should be fine as well
from .operations import *
from . import operators
from .aguila import *
from .numpy_operations import *
from .__about__ import (
    __version__, __author__, __uri__, __license__, __copyright__
)

try:
    from ._pcraster_modflow import *
except ImportError:
    pass  # Modflow module was not installed

try:
    _var = "PCRASTER_NR_WORKER_THREADS"
    _workers = int(os.environ[_var])
    from .multicore import *
    set_nr_worker_threads(_workers)
except ValueError as err:
    msg = "Could not obtain the number of worker threads. The environment variable {} is set to '{}'; use an integer value instead.".format(
        _var, os.environ[_var])
    raise RuntimeError(msg)
except KeyError:
    pass  # No multicore module use intended
except ImportError:
    pass  # Multicore module was not installed


try:
    import matplotlib
    from .matplotlib import plot

except ImportError as e:
    pass  # Matplotlib module was not installed


def runtime_scope(user_main):
    """ Decorator doing nothing but helps LUE """
    def decorated_function(*args, **kwargs):
        user_main(*args, **kwargs)

    return decorated_function

def pcraster_provider():
    """ Helper function returning main PCRaster (sub)packages """
    sys.path.insert(0, '../..')
    import pcraster as pcr_prov
    import pcraster.framework as pcrfw_prov

    return pcr_prov, pcrfw_prov
