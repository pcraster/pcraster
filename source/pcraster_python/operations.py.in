# Don't edit: generated by OperationsToWrappers.xsl
import pcraster._pcraster as _pcraster
import pcraster


def pcrne(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_NE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrne: {exception}")


def pcreq(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_EQ)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcreq: {exception}")


def pcrgt(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_GT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrgt: {exception}")


def pcrge(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_GE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrge: {exception}")


def pcrlt(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrlt: {exception}")


def pcrle(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrle: {exception}")


def min(arg1, *arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MIN)
        results = []
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg1)
            _pcraster._rte().pushField(arg2[i])
            _pcraster._rte().checkAndExec(operator, 2)
            arg1 = _pcraster._rte().releasePopField()
        results.append(arg1)
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"min: {exception}")


def max(arg1, *arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAX)
        results = []
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg1)
            _pcraster._rte().pushField(arg2[i])
            _pcraster._rte().checkAndExec(operator, 2)
            arg1 = _pcraster._rte().releasePopField()
        results.append(arg1)
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"max: {exception}")


def cover(arg1, *arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_COVER)
        results = []
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg1)
            _pcraster._rte().pushField(arg2[i])
            _pcraster._rte().checkAndExec(operator, 2)
            arg1 = _pcraster._rte().releasePopField()
        results.append(arg1)
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"cover: {exception}")


def timeinput(arg1):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUT)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinput: {exception}")


def timeinputsparse(arg1):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTSPARSE)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputsparse: {exception}")


def timeinputmodulo(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTMODULO)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputmodulo: {exception}")


def lookupmapstack(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPMAPSTACK)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupmapstack: {exception}")


def spreadmax(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREADMAX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spreadmax: {exception}")


def spreadmaxzone(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREADMAXZONE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spreadmaxzone: {exception}")


def spread(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREAD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spread: {exception}")


def spreadzone(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREADZONE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spreadzone: {exception}")


def spreadldd(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREADLDD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spreadldd: {exception}")


def spreadlddzone(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPREADLDDZONE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spreadlddzone: {exception}")


def dynamicwaveq(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        if isinstance(arg9, str):
            arg9 = _pcraster.readmap(arg9)
        elif isinstance(arg9, int) or isinstance(arg9, float):
            arg9 = _pcraster._newNonSpatialField(arg9)
        if isinstance(arg10, str):
            arg10 = _pcraster.readmap(arg10)
        elif isinstance(arg10, int) or isinstance(arg10, float):
            arg10 = _pcraster._newNonSpatialField(arg10)
        if isinstance(arg11, str):
            arg11 = _pcraster.readmap(arg11)
        elif isinstance(arg11, int) or isinstance(arg11, float):
            arg11 = _pcraster._newNonSpatialField(arg11)
        if isinstance(arg12, str):
            arg12 = _pcraster.readmap(arg12)
        elif isinstance(arg12, int) or isinstance(arg12, float):
            arg12 = _pcraster._newNonSpatialField(arg12)
        if isinstance(arg13, str):
            arg13 = _pcraster.readmap(arg13)
        elif isinstance(arg13, int) or isinstance(arg13, float):
            arg13 = _pcraster._newNonSpatialField(arg13)
        if isinstance(arg14, str):
            arg14 = _pcraster.readmap(arg14)
        elif isinstance(arg14, int) or isinstance(arg14, float):
            arg14 = _pcraster._newNonSpatialField(arg14)
        if isinstance(arg15, str):
            arg15 = _pcraster.readmap(arg15)
        elif isinstance(arg15, int) or isinstance(arg15, float):
            arg15 = _pcraster._newNonSpatialField(arg15)
        if isinstance(arg16, str):
            arg16 = _pcraster.readmap(arg16)
        elif isinstance(arg16, int) or isinstance(arg16, float):
            arg16 = _pcraster._newNonSpatialField(arg16)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DYNAMICWAVEQ)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().pushField(arg9)
        _pcraster._rte().pushField(arg10)
        _pcraster._rte().pushField(arg11)
        _pcraster._rte().pushField(arg12)
        _pcraster._rte().pushField(arg13)
        _pcraster._rte().pushField(arg14)
        _pcraster._rte().pushField(arg15)
        _pcraster._rte().pushField(arg16)
        _pcraster._rte().checkAndExec(operator, 16)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"dynamicwaveq: {exception}")


def dynamicwaveh(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        if isinstance(arg9, str):
            arg9 = _pcraster.readmap(arg9)
        elif isinstance(arg9, int) or isinstance(arg9, float):
            arg9 = _pcraster._newNonSpatialField(arg9)
        if isinstance(arg10, str):
            arg10 = _pcraster.readmap(arg10)
        elif isinstance(arg10, int) or isinstance(arg10, float):
            arg10 = _pcraster._newNonSpatialField(arg10)
        if isinstance(arg11, str):
            arg11 = _pcraster.readmap(arg11)
        elif isinstance(arg11, int) or isinstance(arg11, float):
            arg11 = _pcraster._newNonSpatialField(arg11)
        if isinstance(arg12, str):
            arg12 = _pcraster.readmap(arg12)
        elif isinstance(arg12, int) or isinstance(arg12, float):
            arg12 = _pcraster._newNonSpatialField(arg12)
        if isinstance(arg13, str):
            arg13 = _pcraster.readmap(arg13)
        elif isinstance(arg13, int) or isinstance(arg13, float):
            arg13 = _pcraster._newNonSpatialField(arg13)
        if isinstance(arg14, str):
            arg14 = _pcraster.readmap(arg14)
        elif isinstance(arg14, int) or isinstance(arg14, float):
            arg14 = _pcraster._newNonSpatialField(arg14)
        if isinstance(arg15, str):
            arg15 = _pcraster.readmap(arg15)
        elif isinstance(arg15, int) or isinstance(arg15, float):
            arg15 = _pcraster._newNonSpatialField(arg15)
        if isinstance(arg16, str):
            arg16 = _pcraster.readmap(arg16)
        elif isinstance(arg16, int) or isinstance(arg16, float):
            arg16 = _pcraster._newNonSpatialField(arg16)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DYNAMICWAVEH)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().pushField(arg9)
        _pcraster._rte().pushField(arg10)
        _pcraster._rte().pushField(arg11)
        _pcraster._rte().pushField(arg12)
        _pcraster._rte().pushField(arg13)
        _pcraster._rte().pushField(arg14)
        _pcraster._rte().pushField(arg15)
        _pcraster._rte().pushField(arg16)
        _pcraster._rte().checkAndExec(operator, 16)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"dynamicwaveh: {exception}")


def order(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ORDER)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"order: {exception}")


def areaorder(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAORDER)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areaorder: {exception}")


def argorder(*arg1):
    try:
        arg1 = list(arg1)
        for i in range(len(arg1)):
            if isinstance(arg1[i], str):
                arg1[i] = _pcraster.readmap(arg1[i])
            elif isinstance(arg1[i], int) or isinstance(arg1[i], float):
                arg1[i] = _pcraster._newNonSpatialField(arg1[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDER)
        results = []
        for i in range(len(arg1)):
            _pcraster._rte().pushField(arg1[i])
        _pcraster._rte().checkAndExec(operator, len(arg1))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorder: {exception}")


def argorderwithid(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDERWITHID)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorderwithid: {exception}")


def argorderarealimited(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDERAREALIMITED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorderarealimited: {exception}")


def argorderwithidarealimited(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDERWITHIDAREALIMITED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorderwithidarealimited: {exception}")


def argorderaddarealimited(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDERADDAREALIMITED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorderaddarealimited: {exception}")


def argorderwithidaddarealimited(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ARGORDERWITHIDADDAREALIMITED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"argorderwithidaddarealimited: {exception}")


def windowminimum(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWMINIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowminimum: {exception}")


def brenner(arg1, arg2, arg3, arg4, arg5, arg6):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_BRENNER)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().checkAndExec(operator, 6)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"brenner: {exception}")


def windowmaximum(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWMAXIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowmaximum: {exception}")


def windowdiversity(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWDIVERSITY)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowdiversity: {exception}")


def areadiversity(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREADIVERSITY)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areadiversity: {exception}")


def areamajority(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAMAJORITY)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areamajority: {exception}")


def windowmajority(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWMAJORITY)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowmajority: {exception}")


def pcrmul(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MUL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrmul: {exception}")


def pcrfdiv(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_FDIV)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrfdiv: {exception}")


def pcrpow(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_POW)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrpow: {exception}")


def pcrmod(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MOD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrmod: {exception}")


def pcridiv(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_IDIV)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcridiv: {exception}")


def pcruadd(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_UADD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcruadd: {exception}")


def pcrumin(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_UMIN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrumin: {exception}")


def pcrbadd(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_BADD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrbadd: {exception}")


def pcrbmin(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_BMIN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrbmin: {exception}")


def timeinputscalar(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTSCALAR)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputscalar: {exception}")


def timeinputdirectional(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTDIRECTIONAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputdirectional: {exception}")


def timeinputboolean(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTBOOLEAN)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputboolean: {exception}")


def timeinputldd(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTLDD)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputldd: {exception}")


def timeinputnominal(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTNOMINAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputnominal: {exception}")


def timeinputordinal(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMEINPUTORDINAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeinputordinal: {exception}")


def lookupnominal(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPNOMINAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupnominal: {exception}")


def lookupboolean(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPBOOLEAN)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupboolean: {exception}")


def lookupordinal(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPORDINAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupordinal: {exception}")


def lookupscalar(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPSCALAR)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupscalar: {exception}")


def lookuplinear(arg1, arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPLINEAR)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookuplinear: {exception}")


def lookupdirectional(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPDIRECTIONAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupdirectional: {exception}")


def lookupldd(arg1, *arg2):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        arg2 = list(arg2)
        for i in range(len(arg2)):
            if isinstance(arg2[i], str):
                arg2[i] = _pcraster.readmap(arg2[i])
            elif isinstance(arg2[i], int) or isinstance(arg2[i], float):
                arg2[i] = _pcraster._newNonSpatialField(arg2[i])
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPLDD)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        for i in range(len(arg2)):
            _pcraster._rte().pushField(arg2[i])
        _pcraster._rte().checkAndExec(operator, 1 + len(arg2))
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupldd: {exception}")


def indexnominal(arg1):
    raise RuntimeError("The indexnominal operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indexboolean(arg1):
    raise RuntimeError("The indexboolean operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indexordinal(arg1):
    raise RuntimeError("The indexordinal operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indexscalar(arg1):
    raise RuntimeError("The indexscalar operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indexdirectional(arg1):
    raise RuntimeError("The indexdirectional operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indexldd(arg1):
    raise RuntimeError("The indexldd operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def indextable(arg1):
    raise RuntimeError("The indextable operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def index(arg1):
    raise RuntimeError("The index operation is not implemented. Only operations with map, table or timeseries arguments are currenly supported")


def ldd(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDD)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ldd: {exception}")


def directional(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DIRECTIONAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"directional: {exception}")


def scalar(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SCALAR)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"scalar: {exception}")


def boolean(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_BOOLEAN_)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"boolean: {exception}")


def nominal(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_NOMINAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"nominal: {exception}")


def ordinal(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ORDINAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ordinal: {exception}")


def pcrand(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AND_)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrand: {exception}")


def pcror(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_OR_)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcror: {exception}")


def pcrxor(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_XOR_)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrxor: {exception}")


def pcrnot(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_NOT_)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pcrnot: {exception}")


def sin(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SIN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"sin: {exception}")


def cos(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_COS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"cos: {exception}")


def tan(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TAN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"tan: {exception}")


def asin(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ASIN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"asin: {exception}")


def acos(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACOS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"acos: {exception}")


def atan(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ATAN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"atan: {exception}")


def abs(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ABS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"abs: {exception}")


def exp(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_EXP)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"exp: {exception}")


def fac(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_FAC)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"fac: {exception}")


def rounddown(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ROUNDDOWN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"rounddown: {exception}")


def ln(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ln: {exception}")


def log10(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOG10)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"log10: {exception}")


def roundup(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ROUNDUP)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"roundup: {exception}")


def roundoff(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ROUNDOFF)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"roundoff: {exception}")


def sqrt(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SQRT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"sqrt: {exception}")


def sqr(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SQR)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"sqr: {exception}")


def normal(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_NORMAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"normal: {exception}")


def uniform(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_UNIFORM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"uniform: {exception}")


def xcoordinate(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_XCOORDINATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"xcoordinate: {exception}")


def ycoordinate(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_YCOORDINATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ycoordinate: {exception}")


def uniqueid(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_UNIQUEID)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"uniqueid: {exception}")


def move(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MOVE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"move: {exception}")


def shift(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SHIFT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"shift: {exception}")


def shift0(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SHIFT0)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"shift0: {exception}")


def celllength():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_CELLLENGTH)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"celllength: {exception}")


def cellarea():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_CELLAREA)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"cellarea: {exception}")


def time():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIME)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"time: {exception}")


def timeslice():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TIMESLICE)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"timeslice: {exception}")


def mapnormal():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPNORMAL)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapnormal: {exception}")


def mapuniform():
    try:
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPUNIFORM)
        results = []
        _pcraster._rte().checkAndExec(operator, 0)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapuniform: {exception}")


def succ(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SUCC)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"succ: {exception}")


def pred(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_PRED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pred: {exception}")


def pit(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_PIT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"pit: {exception}")


def nodirection(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_NODIRECTION)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"nodirection: {exception}")


def mapminimum(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPMINIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapminimum: {exception}")


def mapmaximum(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPMAXIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapmaximum: {exception}")


def defined(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DEFINED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"defined: {exception}")


def maparea(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPAREA)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"maparea: {exception}")


def spatial(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SPATIAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"spatial: {exception}")


def accustate(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accustate: {exception}")


def accuflux(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accuflux: {exception}")


def muskingum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        if isinstance(arg9, str):
            arg9 = _pcraster.readmap(arg9)
        elif isinstance(arg9, int) or isinstance(arg9, float):
            arg9 = _pcraster._newNonSpatialField(arg9)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MUSKINGUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().pushField(arg9)
        _pcraster._rte().checkAndExec(operator, 9)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"muskingum: {exception}")


def dynwavestate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        if isinstance(arg9, str):
            arg9 = _pcraster.readmap(arg9)
        elif isinstance(arg9, int) or isinstance(arg9, float):
            arg9 = _pcraster._newNonSpatialField(arg9)
        if isinstance(arg10, str):
            arg10 = _pcraster.readmap(arg10)
        elif isinstance(arg10, int) or isinstance(arg10, float):
            arg10 = _pcraster._newNonSpatialField(arg10)
        if isinstance(arg11, str):
            arg11 = _pcraster.readmap(arg11)
        elif isinstance(arg11, int) or isinstance(arg11, float):
            arg11 = _pcraster._newNonSpatialField(arg11)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DYNWAVESTATE)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().pushField(arg9)
        _pcraster._rte().pushField(arg10)
        _pcraster._rte().pushField(arg11)
        _pcraster._rte().checkAndExec(operator, 11)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"dynwavestate: {exception}")


def dynwaveflux(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        if isinstance(arg9, str):
            arg9 = _pcraster.readmap(arg9)
        elif isinstance(arg9, int) or isinstance(arg9, float):
            arg9 = _pcraster._newNonSpatialField(arg9)
        if isinstance(arg10, str):
            arg10 = _pcraster.readmap(arg10)
        elif isinstance(arg10, int) or isinstance(arg10, float):
            arg10 = _pcraster._newNonSpatialField(arg10)
        if isinstance(arg11, str):
            arg11 = _pcraster.readmap(arg11)
        elif isinstance(arg11, int) or isinstance(arg11, float):
            arg11 = _pcraster._newNonSpatialField(arg11)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DYNWAVEFLUX)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().pushField(arg9)
        _pcraster._rte().pushField(arg10)
        _pcraster._rte().pushField(arg11)
        _pcraster._rte().checkAndExec(operator, 11)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"dynwaveflux: {exception}")


def lookupstate(arg1, arg2, arg3, arg4, arg5):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPSTATE)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookupstate: {exception}")


def lookuppotential(arg1, arg2, arg3, arg4, arg5):
    try:
        arg1 = _pcraster.DataStorageId(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LOOKUPPOTENTIAL)
        results = []
        _pcraster._rte().pushDataStorageId(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lookuppotential: {exception}")


def accucapacitystate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUCAPACITYSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accucapacitystate: {exception}")


def accucapacityflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUCAPACITYFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accucapacityflux: {exception}")


def accuthresholdstate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTHRESHOLDSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accuthresholdstate: {exception}")


def accuthresholdflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTHRESHOLDFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accuthresholdflux: {exception}")


def accufractionstate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUFRACTIONSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accufractionstate: {exception}")


def accufractionflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUFRACTIONFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accufractionflux: {exception}")


def accutriggerstate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRIGGERSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutriggerstate: {exception}")


def accutriggerflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRIGGERFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutriggerflux: {exception}")


def accutraveltimestate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRAVELTIMESTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutraveltimestate: {exception}")


def accutraveltimeflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRAVELTIMEFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutraveltimeflux: {exception}")


def accutraveltimefractionremoved(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRAVELTIMEFRACTIONREMOVED)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutraveltimefractionremoved: {exception}")


def accutraveltimefractionstate(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRAVELTIMEFRACTIONSTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutraveltimefractionstate: {exception}")


def accutraveltimefractionflux(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ACCUTRAVELTIMEFRACTIONFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"accutraveltimefractionflux: {exception}")


def diffusestate(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DIFFUSESTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"diffusestate: {exception}")


def diffuseflux(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DIFFUSEFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"diffuseflux: {exception}")


def kinwavestate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_KINWAVESTATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().checkAndExec(operator, 8)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"kinwavestate: {exception}")


def kinwaveflux(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_KINWAVEFLUX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().checkAndExec(operator, 8)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"kinwaveflux: {exception}")


def kinematic(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        if isinstance(arg8, str):
            arg8 = _pcraster.readmap(arg8)
        elif isinstance(arg8, int) or isinstance(arg8, float):
            arg8 = _pcraster._newNonSpatialField(arg8)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_KINEMATIC)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().pushField(arg8)
        _pcraster._rte().checkAndExec(operator, 8)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"kinematic: {exception}")


def timeoutput(arg1, arg2):
    raise RuntimeError("The timeoutput operation is not implemented. Only operations with map results are currenly supported")


def mapand(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPAND)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapand: {exception}")


def mapor(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MAPOR)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"mapor: {exception}")


def areaarea(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAAREA)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areaarea: {exception}")


def clump(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_CLUMP)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"clump: {exception}")


def drain(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DRAIN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"drain: {exception}")


def path(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_PATH)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"path: {exception}")


def aspect(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ASPECT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"aspect: {exception}")


def slope(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SLOPE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"slope: {exception}")


def window4total(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOW4TOTAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"window4total: {exception}")


def profcurv(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_PROFCURV)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"profcurv: {exception}")


def plancurv(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_PLANCURV)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"plancurv: {exception}")


def view(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_VIEW)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"view: {exception}")


def extentofview(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_EXTENTOFVIEW)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"extentofview: {exception}")


def inversedistance(arg1, arg2, arg3, arg4, arg5):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_INVERSEDISTANCE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"inversedistance: {exception}")


def catchment(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_CATCHMENT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"catchment: {exception}")


def subcatchment(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SUBCATCHMENT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"subcatchment: {exception}")


def windowaverage(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWAVERAGE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowaverage: {exception}")


def markwhilesumle(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MARKWHILESUMLE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"markwhilesumle: {exception}")


def markwhilesumge(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_MARKWHILESUMGE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"markwhilesumge: {exception}")


def ellipseaverage(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_ELLIPSEAVERAGE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ellipseaverage: {exception}")


def influencesimplegauss(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_INFLUENCESIMPLEGAUSS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"influencesimplegauss: {exception}")


def distributesimplegauss(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DISTRIBUTESIMPLEGAUSS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"distributesimplegauss: {exception}")


def ibngauss(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_IBNGAUSS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ibngauss: {exception}")


def horizontan(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_HORIZONTAN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"horizontan: {exception}")


def catchmenttotal(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_CATCHMENTTOTAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"catchmenttotal: {exception}")


def areamaximum(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAMAXIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areamaximum: {exception}")


def areaminimum(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAMINIMUM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areaminimum: {exception}")


def areaaverage(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAAVERAGE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areaaverage: {exception}")


def areatotal(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREATOTAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areatotal: {exception}")


def areauniform(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREAUNIFORM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areauniform: {exception}")


def areanormal(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_AREANORMAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"areanormal: {exception}")


def windowtotal(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWTOTAL)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowtotal: {exception}")


def windowhighpass(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_WINDOWHIGHPASS)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"windowhighpass: {exception}")


def ldddist(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDDIST)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"ldddist: {exception}")


def upstream(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_UPSTREAM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"upstream: {exception}")


def streamorder(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_STREAMORDER)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"streamorder: {exception}")


def transient(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        if isinstance(arg6, str):
            arg6 = _pcraster.readmap(arg6)
        elif isinstance(arg6, int) or isinstance(arg6, float):
            arg6 = _pcraster._newNonSpatialField(arg6)
        if isinstance(arg7, str):
            arg7 = _pcraster.readmap(arg7)
        elif isinstance(arg7, int) or isinstance(arg7, float):
            arg7 = _pcraster._newNonSpatialField(arg7)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_TRANSIENT)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().pushField(arg6)
        _pcraster._rte().pushField(arg7)
        _pcraster._rte().checkAndExec(operator, 7)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"transient: {exception}")


def downstream(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DOWNSTREAM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"downstream: {exception}")


def downstreamdist(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DOWNSTREAMDIST)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"downstreamdist: {exception}")


def lddmask(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDMASK)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddmask: {exception}")


def lddrepair(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDREPAIR)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddrepair: {exception}")


def slopelength(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SLOPELENGTH)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"slopelength: {exception}")


def lddcreate(arg1, arg2, arg3, arg4, arg5):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDCREATE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddcreate: {exception}")


def lddcreatedem(arg1, arg2, arg3, arg4, arg5):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDCREATEDEM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddcreatedem: {exception}")


def lddcreatend(arg1, arg2, arg3, arg4, arg5):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDCREATEND)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddcreatend: {exception}")


def lddcreatenddem(arg1, arg2, arg3, arg4, arg5):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        if isinstance(arg5, str):
            arg5 = _pcraster.readmap(arg5)
        elif isinstance(arg5, int) or isinstance(arg5, float):
            arg5 = _pcraster._newNonSpatialField(arg5)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LDDCREATENDDEM)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().pushField(arg5)
        _pcraster._rte().checkAndExec(operator, 5)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lddcreatenddem: {exception}")


def riksfraction(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_RIKSFRACTION)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"riksfraction: {exception}")


def squarefraction(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_SQUAREFRACTION)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"squarefraction: {exception}")


def gradx(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_GRADX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"gradx: {exception}")


def grady(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_GRADY)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"grady: {exception}")


def divergence(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DIVERGENCE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"divergence: {exception}")


def diver(arg1, arg2, arg3, arg4):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        if isinstance(arg4, str):
            arg4 = _pcraster.readmap(arg4)
        elif isinstance(arg4, int) or isinstance(arg4, float):
            arg4 = _pcraster._newNonSpatialField(arg4)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_DIVER)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().pushField(arg4)
        _pcraster._rte().checkAndExec(operator, 4)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"diver: {exception}")


def lax(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LAX)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"lax: {exception}")


def laplacian(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_LAPLACIAN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().checkAndExec(operator, 1)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError(f"laplacian: {exception}")


def ifthen(arg1, arg2):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif (isinstance(arg1, int) or isinstance(arg1, float)) and not arg2.isSpatial():
            arg1 = pcraster.spatial(pcraster.boolean(arg1))
        elif isinstance(arg1, pcraster.Field) and not arg2.isSpatial():
            arg1 = pcraster.spatial(pcraster.boolean(arg1))
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_IFTHEN)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().checkAndExec(operator, 2)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError("ifthen: %s" % (str(exception)))


def ifthenelse(arg1, arg2, arg3):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        if isinstance(arg2, str):
            arg2 = _pcraster.readmap(arg2)
        elif isinstance(arg2, int) or isinstance(arg2, float):
            arg2 = _pcraster._newNonSpatialField(arg2)
        if isinstance(arg3, str):
            arg3 = _pcraster.readmap(arg3)
        elif isinstance(arg3, int) or isinstance(arg3, float):
            arg3 = _pcraster._newNonSpatialField(arg3)
        operator = _pcraster._major2op(_pcraster.MAJOR_CODE.OP_IFTHENELSE)
        results = []
        _pcraster._rte().pushField(arg1)
        _pcraster._rte().pushField(arg2)
        _pcraster._rte().pushField(arg3)
        _pcraster._rte().checkAndExec(operator, 3)
        results.append(_pcraster._rte().releasePopField())
        return results[0]
    except RuntimeError as exception:
        raise RuntimeError("ifthenelse: %s" % (str(exception)))


def maptotal(arg1):
    try:
        if isinstance(arg1, str):
            arg1 = _pcraster.readmap(arg1)
        elif isinstance(arg1, int) or isinstance(arg1, float):
            arg1 = _pcraster._newNonSpatialField(arg1)
        return _pcraster.maptotal(arg1)
    except RuntimeError as exception:
        raise RuntimeError("maptotal: %s" % (str(exception)))
