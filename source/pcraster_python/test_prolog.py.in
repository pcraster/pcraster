import glob
import os
import pathlib
import shutil
import subprocess


gdalTranslate="@GDAL_TRANSLATE@ -q"
dest_dir = "@CMAKE_CURRENT_BINARY_DIR@"
example_raster_dir = os.path.join("@PROJECT_BINARY_DIR@", "documentation", "pcraster_manual", "examples")


shutil.rmtree(os.path.join(dest_dir, "validated"), ignore_errors=True)


# tables,tss

filenames = glob.glob(os.path.join(example_raster_dir, "*.map"))
for f in filenames:
    if not "Result" in f:
        shutil.copy(os.path.join(example_raster_dir, "demo", f), dest_dir)

filenames = glob.glob(os.path.join(example_raster_dir, "*.txt"))
for f in filenames:
    if not "Result" in f:
        shutil.copy(os.path.join(example_raster_dir, "demo", f), dest_dir)

shutil.copytree(os.path.join("@PROJECT_SOURCE_DIR@", "documentation", "pcraster_manual", "examples", "validated"), os.path.join(dest_dir, "validated"))

shutil.copy(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "exotic", "nominalUINT1.map"), dest_dir)


# Windows can't remove some subdirectories without
#chmod -R a+rwx ./*

# Copy scripts.
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testcase.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "test.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testNumPy.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "import_test.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testPickle.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testPCRaster.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "test_cellvalue.py"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "test_aguila.py"), dest_dir)
shutil.copy(os.path.join(example_raster_dir, "testexamples.py"), dest_dir)

# Make dummy data for aguila command line testing
path_1 = pathlib.Path(dest_dir, "test_path")
path_2 = pathlib.Path(dest_dir, "test path")
path_1.mkdir(exist_ok=True)
path_2.mkdir(exist_ok=True)
shutil.copy(pathlib.Path(dest_dir, "validated", "ldd_Result.map"), path_1)
shutil.copy(pathlib.Path(dest_dir, "validated", "cos_Result.map"), path_1)
shutil.copy(pathlib.Path(dest_dir, "validated", "ldd_Result.map"), pathlib.Path(path_1, "ldd Result.map"))
shutil.copy(pathlib.Path(dest_dir, "validated", "ldd_Result.map"), path_2)
shutil.copy(pathlib.Path(dest_dir, "validated", "cos_Result.map"), path_2)
shutil.copy(pathlib.Path(dest_dir, "validated", "ldd_Result.map"), pathlib.Path(path_2, "ldd Result.map"))


# Create TIFF used as clonemap input
with open(pathlib.Path(dest_dir, "values_tiff.asc"), "w") as f:
    f.write("""NCOLS 2
NROWS 3
XLLCORNER 100000.0
YLLCORNER 199850.0
CELLSIZE 50.0
NODATA_VALUE -1
1  0
1  1
1 -1""")

cmd = f'{gdalTranslate} -ot Int32 -of GTiff {pathlib.Path(dest_dir, "values_tiff.asc")} {pathlib.Path(dest_dir, "clone.tiff")}'

subprocess.run(cmd.split(), check=True)
